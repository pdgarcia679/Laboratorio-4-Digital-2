
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000830  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e54  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a55  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ea  00000000  00000000  000021c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000029ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056c  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000662  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003652  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 65 03 	call	0x6ca	; 0x6ca <main>
  d4:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <PIN_MODE>:
#include "BitwiseManager_328PB.h"

void PIN_MODE(uint8_t pin, uint8_t mode) {
	if ((pin >= 0) && (pin < 6)) {
  dc:	86 30       	cpi	r24, 0x06	; 6
  de:	08 f0       	brcs	.+2      	; 0xe2 <PIN_MODE+0x6>
  e0:	45 c0       	rjmp	.+138    	; 0x16c <PIN_MODE+0x90>
		if (mode == OUTPUT) {
  e2:	61 11       	cpse	r22, r1
  e4:	1c c0       	rjmp	.+56     	; 0x11e <PIN_MODE+0x42>
			DDRB |= (1 << (pin % 8));
  e6:	94 b1       	in	r25, 0x04	; 4
  e8:	48 2f       	mov	r20, r24
  ea:	47 70       	andi	r20, 0x07	; 7
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <PIN_MODE+0x1a>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	4a 95       	dec	r20
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <PIN_MODE+0x16>
  fa:	29 2b       	or	r18, r25
  fc:	24 b9       	out	0x04, r18	; 4
			if (pin == D12) UCSR1B &= ~(1 << RXEN1);
  fe:	84 30       	cpi	r24, 0x04	; 4
 100:	29 f4       	brne	.+10     	; 0x10c <PIN_MODE+0x30>
 102:	e9 ec       	ldi	r30, 0xC9	; 201
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	90 81       	ld	r25, Z
 108:	9f 7e       	andi	r25, 0xEF	; 239
 10a:	90 83       	st	Z, r25
			if (pin == D11) UCSR1B &= ~(1 << TXEN1);
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	09 f0       	breq	.+2      	; 0x112 <PIN_MODE+0x36>
 110:	43 c1       	rjmp	.+646    	; 0x398 <PIN_MODE+0x2bc>
 112:	e9 ec       	ldi	r30, 0xC9	; 201
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	87 7f       	andi	r24, 0xF7	; 247
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP) {
 11e:	61 30       	cpi	r22, 0x01	; 1
 120:	99 f4       	brne	.+38     	; 0x148 <PIN_MODE+0x6c>
			DDRB &= ~(1 << (pin % 8));
 122:	44 b1       	in	r20, 0x04	; 4
 124:	87 70       	andi	r24, 0x07	; 7
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <PIN_MODE+0x56>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	8a 95       	dec	r24
 134:	e2 f7       	brpl	.-8      	; 0x12e <PIN_MODE+0x52>
 136:	cb 01       	movw	r24, r22
 138:	96 2f       	mov	r25, r22
 13a:	90 95       	com	r25
 13c:	94 23       	and	r25, r20
 13e:	94 b9       	out	0x04, r25	; 4
			PORTB |= (1 << (pin % 8));
 140:	95 b1       	in	r25, 0x05	; 5
 142:	89 2b       	or	r24, r25
 144:	85 b9       	out	0x05, r24	; 5
 146:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN) {
 148:	62 30       	cpi	r22, 0x02	; 2
 14a:	09 f0       	breq	.+2      	; 0x14e <PIN_MODE+0x72>
 14c:	25 c1       	rjmp	.+586    	; 0x398 <PIN_MODE+0x2bc>
			DDRB &= ~(1 << (pin % 8));
 14e:	44 b1       	in	r20, 0x04	; 4
 150:	87 70       	andi	r24, 0x07	; 7
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <PIN_MODE+0x82>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	8a 95       	dec	r24
 160:	e2 f7       	brpl	.-8      	; 0x15a <PIN_MODE+0x7e>
 162:	cb 01       	movw	r24, r22
 164:	80 95       	com	r24
 166:	84 23       	and	r24, r20
 168:	84 b9       	out	0x04, r24	; 4
 16a:	08 95       	ret
		}
	}
	else if ((pin >= 6) && (pin < 12)) {
 16c:	9a ef       	ldi	r25, 0xFA	; 250
 16e:	98 0f       	add	r25, r24
 170:	96 30       	cpi	r25, 0x06	; 6
 172:	08 f0       	brcs	.+2      	; 0x176 <PIN_MODE+0x9a>
 174:	52 c0       	rjmp	.+164    	; 0x21a <PIN_MODE+0x13e>
		if (mode == OUTPUT) {
 176:	61 11       	cpse	r22, r1
 178:	17 c0       	rjmp	.+46     	; 0x1a8 <PIN_MODE+0xcc>
			DDRC |= (1 << ((pin + 2) % 8));
 17a:	47 b1       	in	r20, 0x07	; 7
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 96       	adiw	r24, 0x02	; 2
 180:	87 70       	andi	r24, 0x07	; 7
 182:	90 78       	andi	r25, 0x80	; 128
 184:	99 23       	and	r25, r25
 186:	24 f4       	brge	.+8      	; 0x190 <PIN_MODE+0xb4>
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	88 6f       	ori	r24, 0xF8	; 248
 18c:	9f 6f       	ori	r25, 0xFF	; 255
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	b9 01       	movw	r22, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <PIN_MODE+0xc0>
 198:	66 0f       	add	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <PIN_MODE+0xbc>
 1a0:	cb 01       	movw	r24, r22
 1a2:	84 2b       	or	r24, r20
 1a4:	87 b9       	out	0x07, r24	; 7
 1a6:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP)  {
 1a8:	61 30       	cpi	r22, 0x01	; 1
 1aa:	e1 f4       	brne	.+56     	; 0x1e4 <PIN_MODE+0x108>
			DDRC &= ~(1 << ((pin + 2) % 8));
 1ac:	47 b1       	in	r20, 0x07	; 7
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 96       	adiw	r24, 0x02	; 2
 1b2:	87 70       	andi	r24, 0x07	; 7
 1b4:	90 78       	andi	r25, 0x80	; 128
 1b6:	99 23       	and	r25, r25
 1b8:	24 f4       	brge	.+8      	; 0x1c2 <PIN_MODE+0xe6>
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	88 6f       	ori	r24, 0xF8	; 248
 1be:	9f 6f       	ori	r25, 0xFF	; 255
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <PIN_MODE+0xf2>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	8a 95       	dec	r24
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <PIN_MODE+0xee>
 1d2:	cb 01       	movw	r24, r22
 1d4:	96 2f       	mov	r25, r22
 1d6:	90 95       	com	r25
 1d8:	94 23       	and	r25, r20
 1da:	97 b9       	out	0x07, r25	; 7
			PORTC |= (1 << ((pin + 2) % 8));
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	89 2b       	or	r24, r25
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN) {
 1e4:	62 30       	cpi	r22, 0x02	; 2
 1e6:	09 f0       	breq	.+2      	; 0x1ea <PIN_MODE+0x10e>
 1e8:	d7 c0       	rjmp	.+430    	; 0x398 <PIN_MODE+0x2bc>
			DDRC &= ~(1 << ((pin + 2) % 8));
 1ea:	47 b1       	in	r20, 0x07	; 7
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 96       	adiw	r24, 0x02	; 2
 1f0:	87 70       	andi	r24, 0x07	; 7
 1f2:	90 78       	andi	r25, 0x80	; 128
 1f4:	99 23       	and	r25, r25
 1f6:	24 f4       	brge	.+8      	; 0x200 <PIN_MODE+0x124>
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	88 6f       	ori	r24, 0xF8	; 248
 1fc:	9f 6f       	ori	r25, 0xFF	; 255
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	b9 01       	movw	r22, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <PIN_MODE+0x130>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <PIN_MODE+0x12c>
 210:	cb 01       	movw	r24, r22
 212:	80 95       	com	r24
 214:	84 23       	and	r24, r20
 216:	87 b9       	out	0x07, r24	; 7
 218:	08 95       	ret
		}
	}
	else if ((pin >= 12) && (pin < 20)) {
 21a:	94 ef       	ldi	r25, 0xF4	; 244
 21c:	98 0f       	add	r25, r24
 21e:	98 30       	cpi	r25, 0x08	; 8
 220:	08 f0       	brcs	.+2      	; 0x224 <PIN_MODE+0x148>
 222:	65 c0       	rjmp	.+202    	; 0x2ee <PIN_MODE+0x212>
		if (mode == OUTPUT) {
 224:	61 11       	cpse	r22, r1
 226:	2a c0       	rjmp	.+84     	; 0x27c <PIN_MODE+0x1a0>
			DDRD |= (1 << ((pin + 4) % 8));
 228:	9a b1       	in	r25, 0x0a	; 10
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	2c 5f       	subi	r18, 0xFC	; 252
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	27 70       	andi	r18, 0x07	; 7
 234:	30 78       	andi	r19, 0x80	; 128
 236:	33 23       	and	r19, r19
 238:	34 f4       	brge	.+12     	; 0x246 <PIN_MODE+0x16a>
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	31 09       	sbc	r19, r1
 23e:	28 6f       	ori	r18, 0xF8	; 248
 240:	3f 6f       	ori	r19, 0xFF	; 255
 242:	2f 5f       	subi	r18, 0xFF	; 255
 244:	3f 4f       	sbci	r19, 0xFF	; 255
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	ba 01       	movw	r22, r20
 24c:	02 c0       	rjmp	.+4      	; 0x252 <PIN_MODE+0x176>
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	2a 95       	dec	r18
 254:	e2 f7       	brpl	.-8      	; 0x24e <PIN_MODE+0x172>
 256:	9b 01       	movw	r18, r22
 258:	29 2b       	or	r18, r25
 25a:	2a b9       	out	0x0a, r18	; 10
			if (pin == D0) UCSR0B &= ~(1 << RXEN0);
 25c:	8c 30       	cpi	r24, 0x0C	; 12
 25e:	29 f4       	brne	.+10     	; 0x26a <PIN_MODE+0x18e>
 260:	e1 ec       	ldi	r30, 0xC1	; 193
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	90 81       	ld	r25, Z
 266:	9f 7e       	andi	r25, 0xEF	; 239
 268:	90 83       	st	Z, r25
			if (pin == D1) UCSR0B &= ~(1 << TXEN0);
 26a:	8d 30       	cpi	r24, 0x0D	; 13
 26c:	09 f0       	breq	.+2      	; 0x270 <PIN_MODE+0x194>
 26e:	94 c0       	rjmp	.+296    	; 0x398 <PIN_MODE+0x2bc>
 270:	e1 ec       	ldi	r30, 0xC1	; 193
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	87 7f       	andi	r24, 0xF7	; 247
 278:	80 83       	st	Z, r24
 27a:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP) {
 27c:	61 30       	cpi	r22, 0x01	; 1
 27e:	e1 f4       	brne	.+56     	; 0x2b8 <PIN_MODE+0x1dc>
			DDRD &= ~(1 << ((pin + 4) % 8));
 280:	4a b1       	in	r20, 0x0a	; 10
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	04 96       	adiw	r24, 0x04	; 4
 286:	87 70       	andi	r24, 0x07	; 7
 288:	90 78       	andi	r25, 0x80	; 128
 28a:	99 23       	and	r25, r25
 28c:	24 f4       	brge	.+8      	; 0x296 <PIN_MODE+0x1ba>
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	88 6f       	ori	r24, 0xF8	; 248
 292:	9f 6f       	ori	r25, 0xFF	; 255
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	b9 01       	movw	r22, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <PIN_MODE+0x1c6>
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <PIN_MODE+0x1c2>
 2a6:	cb 01       	movw	r24, r22
 2a8:	96 2f       	mov	r25, r22
 2aa:	90 95       	com	r25
 2ac:	94 23       	and	r25, r20
 2ae:	9a b9       	out	0x0a, r25	; 10
			PORTD |= (1 << ((pin + 4) % 8));
 2b0:	9b b1       	in	r25, 0x0b	; 11
 2b2:	89 2b       	or	r24, r25
 2b4:	8b b9       	out	0x0b, r24	; 11
 2b6:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN) {
 2b8:	62 30       	cpi	r22, 0x02	; 2
 2ba:	09 f0       	breq	.+2      	; 0x2be <PIN_MODE+0x1e2>
 2bc:	6d c0       	rjmp	.+218    	; 0x398 <PIN_MODE+0x2bc>
			DDRD &= ~(1 << ((pin + 4) % 8));
 2be:	4a b1       	in	r20, 0x0a	; 10
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	04 96       	adiw	r24, 0x04	; 4
 2c4:	87 70       	andi	r24, 0x07	; 7
 2c6:	90 78       	andi	r25, 0x80	; 128
 2c8:	99 23       	and	r25, r25
 2ca:	24 f4       	brge	.+8      	; 0x2d4 <PIN_MODE+0x1f8>
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	88 6f       	ori	r24, 0xF8	; 248
 2d0:	9f 6f       	ori	r25, 0xFF	; 255
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	b9 01       	movw	r22, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <PIN_MODE+0x204>
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	8a 95       	dec	r24
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <PIN_MODE+0x200>
 2e4:	cb 01       	movw	r24, r22
 2e6:	80 95       	com	r24
 2e8:	84 23       	and	r24, r20
 2ea:	8a b9       	out	0x0a, r24	; 10
 2ec:	08 95       	ret
		}
	}
	else if ((pin == 20) || (pin == 21)) {
 2ee:	9c ee       	ldi	r25, 0xEC	; 236
 2f0:	98 0f       	add	r25, r24
 2f2:	92 30       	cpi	r25, 0x02	; 2
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <PIN_MODE+0x21c>
 2f6:	50 c0       	rjmp	.+160    	; 0x398 <PIN_MODE+0x2bc>
		if (mode == OUTPUT) {
 2f8:	61 11       	cpse	r22, r1
 2fa:	17 c0       	rjmp	.+46     	; 0x32a <PIN_MODE+0x24e>
			DDRE |= (1 << ((pin - 2) % 8));
 2fc:	4d b1       	in	r20, 0x0d	; 13
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 97       	sbiw	r24, 0x02	; 2
 302:	87 70       	andi	r24, 0x07	; 7
 304:	90 78       	andi	r25, 0x80	; 128
 306:	99 23       	and	r25, r25
 308:	24 f4       	brge	.+8      	; 0x312 <PIN_MODE+0x236>
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	88 6f       	ori	r24, 0xF8	; 248
 30e:	9f 6f       	ori	r25, 0xFF	; 255
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <PIN_MODE+0x242>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <PIN_MODE+0x23e>
 322:	cb 01       	movw	r24, r22
 324:	84 2b       	or	r24, r20
 326:	8d b9       	out	0x0d, r24	; 13
 328:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP) {
 32a:	61 30       	cpi	r22, 0x01	; 1
 32c:	e1 f4       	brne	.+56     	; 0x366 <PIN_MODE+0x28a>
			DDRE &= ~(1 << ((pin - 2) % 8));
 32e:	4d b1       	in	r20, 0x0d	; 13
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 97       	sbiw	r24, 0x02	; 2
 334:	87 70       	andi	r24, 0x07	; 7
 336:	90 78       	andi	r25, 0x80	; 128
 338:	99 23       	and	r25, r25
 33a:	24 f4       	brge	.+8      	; 0x344 <PIN_MODE+0x268>
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	88 6f       	ori	r24, 0xF8	; 248
 340:	9f 6f       	ori	r25, 0xFF	; 255
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	b9 01       	movw	r22, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <PIN_MODE+0x274>
 34c:	66 0f       	add	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	8a 95       	dec	r24
 352:	e2 f7       	brpl	.-8      	; 0x34c <PIN_MODE+0x270>
 354:	cb 01       	movw	r24, r22
 356:	96 2f       	mov	r25, r22
 358:	90 95       	com	r25
 35a:	94 23       	and	r25, r20
 35c:	9d b9       	out	0x0d, r25	; 13
			PORTE |= (1 << ((pin - 2) % 8));
 35e:	9e b1       	in	r25, 0x0e	; 14
 360:	89 2b       	or	r24, r25
 362:	8e b9       	out	0x0e, r24	; 14
 364:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN)	{
 366:	62 30       	cpi	r22, 0x02	; 2
 368:	b9 f4       	brne	.+46     	; 0x398 <PIN_MODE+0x2bc>
			DDRE &= ~(1 << ((pin - 2) % 8));
 36a:	4d b1       	in	r20, 0x0d	; 13
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 97       	sbiw	r24, 0x02	; 2
 370:	87 70       	andi	r24, 0x07	; 7
 372:	90 78       	andi	r25, 0x80	; 128
 374:	99 23       	and	r25, r25
 376:	24 f4       	brge	.+8      	; 0x380 <PIN_MODE+0x2a4>
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	88 6f       	ori	r24, 0xF8	; 248
 37c:	9f 6f       	ori	r25, 0xFF	; 255
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	b9 01       	movw	r22, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <PIN_MODE+0x2b0>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	8a 95       	dec	r24
 38e:	e2 f7       	brpl	.-8      	; 0x388 <PIN_MODE+0x2ac>
 390:	cb 01       	movw	r24, r22
 392:	80 95       	com	r24
 394:	84 23       	and	r24, r20
 396:	8d b9       	out	0x0d, r24	; 13
 398:	08 95       	ret

0000039a <DIGITAL_WRITE>:
		}
	}
}

void DIGITAL_WRITE(uint8_t pin, uint8_t value) {
	if ((pin >= 0) && (pin < 6)) {
 39a:	86 30       	cpi	r24, 0x06	; 6
 39c:	f8 f4       	brcc	.+62     	; 0x3dc <DIGITAL_WRITE+0x42>
		if (value) {
 39e:	66 23       	and	r22, r22
 3a0:	71 f0       	breq	.+28     	; 0x3be <DIGITAL_WRITE+0x24>
			PORTB |= (1 << (pin % 8));
 3a2:	45 b1       	in	r20, 0x05	; 5
 3a4:	87 70       	andi	r24, 0x07	; 7
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	b9 01       	movw	r22, r18
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIGITAL_WRITE+0x18>
 3ae:	66 0f       	add	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	8a 95       	dec	r24
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIGITAL_WRITE+0x14>
 3b6:	cb 01       	movw	r24, r22
 3b8:	84 2b       	or	r24, r20
 3ba:	85 b9       	out	0x05, r24	; 5
 3bc:	08 95       	ret
		}
		else {
			PORTB &= ~(1 << (pin % 8));
 3be:	45 b1       	in	r20, 0x05	; 5
 3c0:	87 70       	andi	r24, 0x07	; 7
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	b9 01       	movw	r22, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIGITAL_WRITE+0x34>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	8a 95       	dec	r24
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIGITAL_WRITE+0x30>
 3d2:	cb 01       	movw	r24, r22
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	85 b9       	out	0x05, r24	; 5
 3da:	08 95       	ret
		}
	}
	else if ((pin >= 6) && (pin < 12)) {
 3dc:	9a ef       	ldi	r25, 0xFA	; 250
 3de:	98 0f       	add	r25, r24
 3e0:	96 30       	cpi	r25, 0x06	; 6
 3e2:	88 f5       	brcc	.+98     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		if (value) {
 3e4:	66 23       	and	r22, r22
 3e6:	b9 f0       	breq	.+46     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			PORTC |= (1 << ((pin + 2) % 8));
 3e8:	48 b1       	in	r20, 0x08	; 8
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 96       	adiw	r24, 0x02	; 2
 3ee:	87 70       	andi	r24, 0x07	; 7
 3f0:	90 78       	andi	r25, 0x80	; 128
 3f2:	99 23       	and	r25, r25
 3f4:	24 f4       	brge	.+8      	; 0x3fe <DIGITAL_WRITE+0x64>
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	88 6f       	ori	r24, 0xF8	; 248
 3fa:	9f 6f       	ori	r25, 0xFF	; 255
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	b9 01       	movw	r22, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	cb 01       	movw	r24, r22
 410:	84 2b       	or	r24, r20
 412:	88 b9       	out	0x08, r24	; 8
 414:	08 95       	ret
		}
		else {
			PORTC &= ~(1 << ((pin + 2) % 8));
 416:	48 b1       	in	r20, 0x08	; 8
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 96       	adiw	r24, 0x02	; 2
 41c:	87 70       	andi	r24, 0x07	; 7
 41e:	90 78       	andi	r25, 0x80	; 128
 420:	99 23       	and	r25, r25
 422:	24 f4       	brge	.+8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	88 6f       	ori	r24, 0xF8	; 248
 428:	9f 6f       	ori	r25, 0xFF	; 255
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	b9 01       	movw	r22, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	8a 95       	dec	r24
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	cb 01       	movw	r24, r22
 43e:	80 95       	com	r24
 440:	84 23       	and	r24, r20
 442:	88 b9       	out	0x08, r24	; 8
 444:	08 95       	ret
		}
	}
	else if ((pin >= 12) && (pin < 20)) {
 446:	94 ef       	ldi	r25, 0xF4	; 244
 448:	98 0f       	add	r25, r24
 44a:	98 30       	cpi	r25, 0x08	; 8
 44c:	88 f5       	brcc	.+98     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
		if (value) {
 44e:	66 23       	and	r22, r22
 450:	b9 f0       	breq	.+46     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			PORTD |= (1 << ((pin + 4) % 8));
 452:	4b b1       	in	r20, 0x0b	; 11
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	04 96       	adiw	r24, 0x04	; 4
 458:	87 70       	andi	r24, 0x07	; 7
 45a:	90 78       	andi	r25, 0x80	; 128
 45c:	99 23       	and	r25, r25
 45e:	24 f4       	brge	.+8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	88 6f       	ori	r24, 0xF8	; 248
 464:	9f 6f       	ori	r25, 0xFF	; 255
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	b9 01       	movw	r22, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	8a 95       	dec	r24
 476:	e2 f7       	brpl	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 478:	cb 01       	movw	r24, r22
 47a:	84 2b       	or	r24, r20
 47c:	8b b9       	out	0x0b, r24	; 11
 47e:	08 95       	ret
		}
		else {
			PORTD &= ~(1 << ((pin + 4) % 8));
 480:	4b b1       	in	r20, 0x0b	; 11
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	04 96       	adiw	r24, 0x04	; 4
 486:	87 70       	andi	r24, 0x07	; 7
 488:	90 78       	andi	r25, 0x80	; 128
 48a:	99 23       	and	r25, r25
 48c:	24 f4       	brge	.+8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	88 6f       	ori	r24, 0xF8	; 248
 492:	9f 6f       	ori	r25, 0xFF	; 255
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	b9 01       	movw	r22, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	8a 95       	dec	r24
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	cb 01       	movw	r24, r22
 4a8:	80 95       	com	r24
 4aa:	84 23       	and	r24, r20
 4ac:	8b b9       	out	0x0b, r24	; 11
 4ae:	08 95       	ret
		}
	}
	else if ((pin == 20) || (pin == 21)) {
 4b0:	9c ee       	ldi	r25, 0xEC	; 236
 4b2:	98 0f       	add	r25, r24
 4b4:	92 30       	cpi	r25, 0x02	; 2
 4b6:	80 f5       	brcc	.+96     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
		if (value) {
 4b8:	66 23       	and	r22, r22
 4ba:	b9 f0       	breq	.+46     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			PORTE |= (1 << ((pin - 2) % 8));
 4bc:	4e b1       	in	r20, 0x0e	; 14
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 97       	sbiw	r24, 0x02	; 2
 4c2:	87 70       	andi	r24, 0x07	; 7
 4c4:	90 78       	andi	r25, 0x80	; 128
 4c6:	99 23       	and	r25, r25
 4c8:	24 f4       	brge	.+8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	88 6f       	ori	r24, 0xF8	; 248
 4ce:	9f 6f       	ori	r25, 0xFF	; 255
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	21 e0       	ldi	r18, 0x01	; 1
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	b9 01       	movw	r22, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4e2:	cb 01       	movw	r24, r22
 4e4:	84 2b       	or	r24, r20
 4e6:	8e b9       	out	0x0e, r24	; 14
 4e8:	08 95       	ret
		}
		else {
			PORTE &= ~(1 << ((pin - 2) % 8));
 4ea:	4e b1       	in	r20, 0x0e	; 14
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 97       	sbiw	r24, 0x02	; 2
 4f0:	87 70       	andi	r24, 0x07	; 7
 4f2:	90 78       	andi	r25, 0x80	; 128
 4f4:	99 23       	and	r25, r25
 4f6:	24 f4       	brge	.+8      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	88 6f       	ori	r24, 0xF8	; 248
 4fc:	9f 6f       	ori	r25, 0xFF	; 255
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	b9 01       	movw	r22, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	8a 95       	dec	r24
 50e:	e2 f7       	brpl	.-8      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 510:	cb 01       	movw	r24, r22
 512:	80 95       	com	r24
 514:	84 23       	and	r24, r20
 516:	8e b9       	out	0x0e, r24	; 14
 518:	08 95       	ret

0000051a <Init_TWI>:
	TWI_STOP();
	return 0;
}

void Init_TWI() {
	TWSR0 &= ~(1<<TWPS0);
 51a:	e9 eb       	ldi	r30, 0xB9	; 185
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	8e 7f       	andi	r24, 0xFE	; 254
 522:	80 83       	st	Z, r24
	TWSR0 &= ~(1<<TWPS1);
 524:	80 81       	ld	r24, Z
 526:	8d 7f       	andi	r24, 0xFD	; 253
 528:	80 83       	st	Z, r24
	TWBR0 = 72;
 52a:	88 e4       	ldi	r24, 0x48	; 72
 52c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR0 = (1<<TWEN);
 530:	84 e0       	ldi	r24, 0x04	; 4
 532:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 536:	08 95       	ret

00000538 <TWI_START>:

void TWI_START() {
	/* (1) The TWI hardware checks if the bus is available, and generates a START condition on the bus if it is free.
	*  (2) The TWEN bit enables TWI operation and activates the TWI interface.
	*  (3) This bit is set by hardware when the TWI has finished its current job and expects application software response. */
	TWCR0 = (1<<TWSTA) | (1<<TWEN) | (1<<TWINT);	// (1) | (2) | (3)
 538:	84 ea       	ldi	r24, 0xA4	; 164
 53a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 53e:	08 95       	ret

00000540 <TWI_STOP>:

void TWI_STOP() {
	/* (1) Writing the TWSTO bit to one in Master mode will generate a STOP condition on the 2-wire Serial Bus TWI.
	*  (2) The TWEN bit enables TWI operation and activates the TWI interface.
	*  (3) This bit is set by hardware when the TWI has finished its current job and expects application software response. */
	TWCR0 |= (1<<TWSTO) | (1<<TWEN) | (1<<TWINT);	// (1) | (2) | (3)
 540:	ec eb       	ldi	r30, 0xBC	; 188
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	84 69       	ori	r24, 0x94	; 148
 548:	80 83       	st	Z, r24
	while (TWCR0 & (1<<TWSTO));
 54a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 54e:	84 fd       	sbrc	r24, 4
 550:	fc cf       	rjmp	.-8      	; 0x54a <TWI_STOP+0xa>
}
 552:	08 95       	ret

00000554 <TWI_WriteData>:
		/* Needs more information to define the specific trajectory and frame (big function) */
		/* User can use different functions and each pass the specific parameters to the big function */
	}
}

uint8_t TWI_WriteData(uint8_t twi_address, uint8_t twi_load) {
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	c8 2f       	mov	r28, r24
 55a:	d6 2f       	mov	r29, r22
	TWI_START();
 55c:	0e 94 9c 02 	call	0x538	; 0x538 <TWI_START>
	while(!(TWCR0 & (1<<TWINT)));
 560:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 564:	88 23       	and	r24, r24
 566:	e4 f7       	brge	.-8      	; 0x560 <TWI_WriteData+0xc>
	if ((TWSR0 & 0xF8) != STATUS_START)	{
 568:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 56c:	88 7f       	andi	r24, 0xF8	; 248
 56e:	88 30       	cpi	r24, 0x08	; 8
 570:	21 f0       	breq	.+8      	; 0x57a <TWI_WriteData+0x26>
		TWI_STOP();
 572:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
		return 1;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	28 c0       	rjmp	.+80     	; 0x5ca <TWI_WriteData+0x76>
	}
	
	TWDR0 = (twi_address << 1) | 0;
 57a:	cc 0f       	add	r28, r28
 57c:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWEN) | (1<<TWINT);
 580:	84 e8       	ldi	r24, 0x84	; 132
 582:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR0 & (1<<TWINT)));
 586:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 58a:	88 23       	and	r24, r24
 58c:	e4 f7       	brge	.-8      	; 0x586 <TWI_WriteData+0x32>
	if ((TWSR0 & 0xF8) != STATUS_MT_SLA_ACK)	{
 58e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 592:	88 7f       	andi	r24, 0xF8	; 248
 594:	88 31       	cpi	r24, 0x18	; 24
 596:	21 f0       	breq	.+8      	; 0x5a0 <TWI_WriteData+0x4c>
		TWI_STOP();
 598:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
		return 1;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	15 c0       	rjmp	.+42     	; 0x5ca <TWI_WriteData+0x76>
	}
	
	TWDR0 = twi_load;
 5a0:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWEN) | (1<<TWINT);
 5a4:	84 e8       	ldi	r24, 0x84	; 132
 5a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR0 & (1<<TWINT)));
 5aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5ae:	88 23       	and	r24, r24
 5b0:	e4 f7       	brge	.-8      	; 0x5aa <TWI_WriteData+0x56>
	if ((TWSR0 & 0xF8) != STATUS_MT_DATA_ACK)	{
 5b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5b6:	88 7f       	andi	r24, 0xF8	; 248
 5b8:	88 32       	cpi	r24, 0x28	; 40
 5ba:	21 f0       	breq	.+8      	; 0x5c4 <TWI_WriteData+0x70>
		TWI_STOP();
 5bc:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
		return 1;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <TWI_WriteData+0x76>
	}
	
	TWI_STOP();
 5c4:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
	return 0;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
}
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

000005d0 <TWI_ReadData>:

uint8_t TWI_ReadData(uint8_t twi_address, uint8_t data_address, uint8_t* data_pointer) {
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	18 2f       	mov	r17, r24
 5da:	06 2f       	mov	r16, r22
 5dc:	ea 01       	movw	r28, r20
	TWI_START();
 5de:	0e 94 9c 02 	call	0x538	; 0x538 <TWI_START>
	while (!(TWCR0 & (1<<TWINT)));
 5e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5e6:	88 23       	and	r24, r24
 5e8:	e4 f7       	brge	.-8      	; 0x5e2 <TWI_ReadData+0x12>
	if ((TWSR0 & 0xF8) != STATUS_START)	{
 5ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5ee:	88 7f       	andi	r24, 0xF8	; 248
 5f0:	88 30       	cpi	r24, 0x08	; 8
 5f2:	21 f0       	breq	.+8      	; 0x5fc <TWI_ReadData+0x2c>
		TWI_STOP();
 5f4:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
		return 1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	62 c0       	rjmp	.+196    	; 0x6c0 <TWI_ReadData+0xf0>
	}
	
	TWDR0 = (twi_address << 1) | 0;
 5fc:	81 2f       	mov	r24, r17
 5fe:	88 0f       	add	r24, r24
 600:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWEN) | (1<<TWINT);
 604:	84 e8       	ldi	r24, 0x84	; 132
 606:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR0 & (1<<TWINT)));
 60a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 60e:	88 23       	and	r24, r24
 610:	e4 f7       	brge	.-8      	; 0x60a <TWI_ReadData+0x3a>
	if ((TWSR0 & 0xF8) != STATUS_MT_SLA_ACK)	{
 612:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 616:	88 7f       	andi	r24, 0xF8	; 248
 618:	88 31       	cpi	r24, 0x18	; 24
 61a:	21 f0       	breq	.+8      	; 0x624 <TWI_ReadData+0x54>
		TWI_STOP();
 61c:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
		return 1;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	4e c0       	rjmp	.+156    	; 0x6c0 <TWI_ReadData+0xf0>
	}
	
	TWDR0 = data_address;
 624:	00 93 bb 00 	sts	0x00BB, r16	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWEN) | (1<<TWINT);
 628:	84 e8       	ldi	r24, 0x84	; 132
 62a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR0 & (1<<TWINT)));
 62e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 632:	88 23       	and	r24, r24
 634:	e4 f7       	brge	.-8      	; 0x62e <TWI_ReadData+0x5e>
	if ((TWSR0 & 0xF8) != STATUS_MT_DATA_ACK)	{
 636:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 63a:	88 7f       	andi	r24, 0xF8	; 248
 63c:	88 32       	cpi	r24, 0x28	; 40
 63e:	21 f0       	breq	.+8      	; 0x648 <TWI_ReadData+0x78>
		TWI_STOP();
 640:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
		return 1;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	3c c0       	rjmp	.+120    	; 0x6c0 <TWI_ReadData+0xf0>
	}
	
	TWI_START();
 648:	0e 94 9c 02 	call	0x538	; 0x538 <TWI_START>
	while (!(TWCR0 & (1<<TWINT)));
 64c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 650:	88 23       	and	r24, r24
 652:	e4 f7       	brge	.-8      	; 0x64c <TWI_ReadData+0x7c>
	if ((TWSR0 & 0xF8) != STATUS_REP_START)	{
 654:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 658:	88 7f       	andi	r24, 0xF8	; 248
 65a:	80 31       	cpi	r24, 0x10	; 16
 65c:	21 f0       	breq	.+8      	; 0x666 <TWI_ReadData+0x96>
		TWI_STOP();
 65e:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
		return 1;
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	2d c0       	rjmp	.+90     	; 0x6c0 <TWI_ReadData+0xf0>
	}
	
	TWDR0 = (twi_address << 1) | 1;
 666:	81 2f       	mov	r24, r17
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	81 60       	ori	r24, 0x01	; 1
 670:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWEN) | (1<<TWINT);
 674:	84 e8       	ldi	r24, 0x84	; 132
 676:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR0 & (1<<TWINT)));
 67a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 67e:	88 23       	and	r24, r24
 680:	e4 f7       	brge	.-8      	; 0x67a <TWI_ReadData+0xaa>
	if ((TWSR0 & 0xF8) != STATUS_MR_SLA_ACK) {
 682:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 686:	88 7f       	andi	r24, 0xF8	; 248
 688:	80 34       	cpi	r24, 0x40	; 64
 68a:	21 f0       	breq	.+8      	; 0x694 <TWI_ReadData+0xc4>
		TWI_STOP();
 68c:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
		return 1;
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	16 c0       	rjmp	.+44     	; 0x6c0 <TWI_ReadData+0xf0>
	}
		
	TWCR0 = (1<<TWEN) | (1<<TWINT);
 694:	84 e8       	ldi	r24, 0x84	; 132
 696:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR0 & (1<<TWINT)));
 69a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 69e:	88 23       	and	r24, r24
 6a0:	e4 f7       	brge	.-8      	; 0x69a <TWI_ReadData+0xca>
	if ((TWSR0 & 0xF8) != STATUS_MR_DATA_NACK)	{	// Other does not verify this
 6a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 6a6:	88 7f       	andi	r24, 0xF8	; 248
 6a8:	88 35       	cpi	r24, 0x58	; 88
 6aa:	21 f0       	breq	.+8      	; 0x6b4 <TWI_ReadData+0xe4>
		TWI_STOP();
 6ac:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
		return 1;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <TWI_ReadData+0xf0>
	}
	*data_pointer = TWDR0;
 6b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 6b8:	88 83       	st	Y, r24
	
	TWI_STOP();
 6ba:	0e 94 a0 02 	call	0x540	; 0x540 <TWI_STOP>
	return 0;
 6be:	80 e0       	ldi	r24, 0x00	; 0
}
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	08 95       	ret

000006ca <main>:

uint8_t received_data;

int main(void)
{
    cli();
 6ca:	f8 94       	cli
	Init_TWI();
 6cc:	0e 94 8d 02 	call	0x51a	; 0x51a <Init_TWI>
	sei();
 6d0:	78 94       	sei
	
	PIN_MODE(D9, OUTPUT);
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	0e 94 6e 00 	call	0xdc	; 0xdc <PIN_MODE>
	PIN_MODE(D8, OUTPUT);
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	0e 94 6e 00 	call	0xdc	; 0xdc <PIN_MODE>
	PIN_MODE(D7, OUTPUT);
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	83 e1       	ldi	r24, 0x13	; 19
 6e6:	0e 94 6e 00 	call	0xdc	; 0xdc <PIN_MODE>
	PIN_MODE(D6, OUTPUT);
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	82 e1       	ldi	r24, 0x12	; 18
 6ee:	0e 94 6e 00 	call	0xdc	; 0xdc <PIN_MODE>
	PIN_MODE(D5, OUTPUT);
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	81 e1       	ldi	r24, 0x11	; 17
 6f6:	0e 94 6e 00 	call	0xdc	; 0xdc <PIN_MODE>
	PIN_MODE(D4, OUTPUT);
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	80 e1       	ldi	r24, 0x10	; 16
 6fe:	0e 94 6e 00 	call	0xdc	; 0xdc <PIN_MODE>
	PIN_MODE(D3, OUTPUT);
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	8f e0       	ldi	r24, 0x0F	; 15
 706:	0e 94 6e 00 	call	0xdc	; 0xdc <PIN_MODE>
	PIN_MODE(D2, OUTPUT);
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	8e e0       	ldi	r24, 0x0E	; 14
 70e:	0e 94 6e 00 	call	0xdc	; 0xdc <PIN_MODE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 712:	8f e3       	ldi	r24, 0x3F	; 63
 714:	9c e9       	ldi	r25, 0x9C	; 156
 716:	01 97       	sbiw	r24, 0x01	; 1
 718:	f1 f7       	brne	.-4      	; 0x716 <main+0x4c>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <main+0x52>
 71c:	00 00       	nop
	
	_delay_ms(10);
						
	if (TWI_WriteData(0x36, 0b10101010)) {
 71e:	6a ea       	ldi	r22, 0xAA	; 170
 720:	86 e3       	ldi	r24, 0x36	; 54
 722:	0e 94 aa 02 	call	0x554	; 0x554 <TWI_WriteData>
 726:	8f e3       	ldi	r24, 0x3F	; 63
 728:	9c e9       	ldi	r25, 0x9C	; 156
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <main+0x60>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <main+0x66>
 730:	00 00       	nop
		
	}
	_delay_ms(10);
	if (TWI_ReadData(0x36, 0xA1, &received_data)) {
 732:	40 e0       	ldi	r20, 0x00	; 0
 734:	51 e0       	ldi	r21, 0x01	; 1
 736:	61 ea       	ldi	r22, 0xA1	; 161
 738:	86 e3       	ldi	r24, 0x36	; 54
 73a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <TWI_ReadData>
		
	}
	
	DIGITAL_WRITE(D9, READ_BIT(received_data, 7));
 73e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 742:	66 1f       	adc	r22, r22
 744:	66 27       	eor	r22, r22
 746:	66 1f       	adc	r22, r22
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	0e 94 cd 01 	call	0x39a	; 0x39a <DIGITAL_WRITE>
	DIGITAL_WRITE(D8, READ_BIT(received_data, 6));
 74e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 752:	66 fb       	bst	r22, 6
 754:	66 27       	eor	r22, r22
 756:	60 f9       	bld	r22, 0
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	0e 94 cd 01 	call	0x39a	; 0x39a <DIGITAL_WRITE>
	DIGITAL_WRITE(D7, READ_BIT(received_data, 5));
 75e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 762:	65 fb       	bst	r22, 5
 764:	66 27       	eor	r22, r22
 766:	60 f9       	bld	r22, 0
 768:	83 e1       	ldi	r24, 0x13	; 19
 76a:	0e 94 cd 01 	call	0x39a	; 0x39a <DIGITAL_WRITE>
	DIGITAL_WRITE(D6, READ_BIT(received_data, 4));
 76e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 772:	62 95       	swap	r22
 774:	61 70       	andi	r22, 0x01	; 1
 776:	82 e1       	ldi	r24, 0x12	; 18
 778:	0e 94 cd 01 	call	0x39a	; 0x39a <DIGITAL_WRITE>
	DIGITAL_WRITE(D5, READ_BIT(received_data, 3));
 77c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 780:	63 fb       	bst	r22, 3
 782:	66 27       	eor	r22, r22
 784:	60 f9       	bld	r22, 0
 786:	81 e1       	ldi	r24, 0x11	; 17
 788:	0e 94 cd 01 	call	0x39a	; 0x39a <DIGITAL_WRITE>
	DIGITAL_WRITE(D4, READ_BIT(received_data, 2));
 78c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 790:	62 fb       	bst	r22, 2
 792:	66 27       	eor	r22, r22
 794:	60 f9       	bld	r22, 0
 796:	80 e1       	ldi	r24, 0x10	; 16
 798:	0e 94 cd 01 	call	0x39a	; 0x39a <DIGITAL_WRITE>
	DIGITAL_WRITE(D3, READ_BIT(received_data, 1));
 79c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7a0:	66 95       	lsr	r22
 7a2:	61 70       	andi	r22, 0x01	; 1
 7a4:	8f e0       	ldi	r24, 0x0F	; 15
 7a6:	0e 94 cd 01 	call	0x39a	; 0x39a <DIGITAL_WRITE>
	DIGITAL_WRITE(D2, READ_BIT(received_data, 0));
 7aa:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7ae:	61 70       	andi	r22, 0x01	; 1
 7b0:	8e e0       	ldi	r24, 0x0E	; 14
 7b2:	0e 94 cd 01 	call	0x39a	; 0x39a <DIGITAL_WRITE>
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <main+0xec>

000007b8 <_exit>:
 7b8:	f8 94       	cli

000007ba <__stop_program>:
 7ba:	ff cf       	rjmp	.-2      	; 0x7ba <__stop_program>


Laboratorio4_Slave1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000742  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000007b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e77  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a88  00000000  00000000  0000172f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000750  00000000  00000000  000021b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00002908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000600  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c4  00000000  00000000  00002fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_24>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e4       	ldi	r30, 0x42	; 66
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 30       	cpi	r26, 0x00	; 0
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 30       	cpi	r26, 0x05	; 5
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 17 03 	call	0x62e	; 0x62e <main>
  ea:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <SettingADC>:
#include "ADC.h"

void SettingADC(uint8_t ReferenceADC, uint8_t AdjustADC, uint8_t PrescalerADC, uint8_t TriggerSourceADC) {
	ADMUX = (ADMUX & 0x3F) | (ReferenceADC);				// Voltage reference selection
  f2:	ec e7       	ldi	r30, 0x7C	; 124
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	9f 73       	andi	r25, 0x3F	; 63
  fa:	89 2b       	or	r24, r25
  fc:	80 83       	st	Z, r24
	ADMUX = (ADMUX & 0xDF) | (AdjustADC);					// Justification
  fe:	80 81       	ld	r24, Z
 100:	8f 7d       	andi	r24, 0xDF	; 223
 102:	68 2b       	or	r22, r24
 104:	60 83       	st	Z, r22
	ADCSRA = (ADCSRA & 0xF8) | (PrescalerADC);				// Prescaler
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 7f       	andi	r24, 0xF8	; 248
 10e:	48 2b       	or	r20, r24
 110:	40 83       	st	Z, r20
	ADCSRB = (ADCSRB & 0xF8) | (TriggerSourceADC);			// Auto trigger source
 112:	ab e7       	ldi	r26, 0x7B	; 123
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	8c 91       	ld	r24, X
 118:	88 7f       	andi	r24, 0xF8	; 248
 11a:	28 2b       	or	r18, r24
 11c:	2c 93       	st	X, r18
	ADCSRA &= ~(1<<ADEN);									// Disable ADC
 11e:	80 81       	ld	r24, Z
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <AnalogRead>:
}

uint8_t AnalogRead(uint8_t ChannelADC) {
	DIDR0 |= (1<<ChannelADC);
 126:	ee e7       	ldi	r30, 0x7E	; 126
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	90 81       	ld	r25, Z
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	08 2e       	mov	r0, r24
 132:	02 c0       	rjmp	.+4      	; 0x138 <AnalogRead+0x12>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <AnalogRead+0xe>
 13c:	92 2b       	or	r25, r18
 13e:	90 83       	st	Z, r25
	ADMUX = (ADMUX & 0xF0) | (ChannelADC);					// Conversion process (1/4)
 140:	ec e7       	ldi	r30, 0x7C	; 124
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	90 7f       	andi	r25, 0xF0	; 240
 148:	89 2b       	or	r24, r25
 14a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN | 1<<ADSC);							// Conversion process (2/4)
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 6c       	ori	r24, 0xC0	; 192
 154:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));								// Conversion process (3/4)
 156:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 15a:	86 fd       	sbrc	r24, 6
 15c:	fc cf       	rjmp	.-8      	; 0x156 <AnalogRead+0x30>
	ADCSRA &= ~(1<<ADEN);									// Conversion process (4/4)
 15e:	ea e7       	ldi	r30, 0x7A	; 122
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	8f 77       	andi	r24, 0x7F	; 127
 166:	80 83       	st	Z, r24
	DIDR0 &= ~(1<<ChannelADC);
 168:	ee e7       	ldi	r30, 0x7E	; 126
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	20 95       	com	r18
 170:	28 23       	and	r18, r24
 172:	20 83       	st	Z, r18
	return ADCH;
 174:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 178:	08 95       	ret

0000017a <PIN_MODE>:
#include "BitwiseManager_328PB.h"

void PIN_MODE(uint8_t pin, uint8_t mode) {
	if ((pin >= 0) && (pin < 6)) {
 17a:	86 30       	cpi	r24, 0x06	; 6
 17c:	08 f0       	brcs	.+2      	; 0x180 <PIN_MODE+0x6>
 17e:	45 c0       	rjmp	.+138    	; 0x20a <PIN_MODE+0x90>
		if (mode == OUTPUT) {
 180:	61 11       	cpse	r22, r1
 182:	1c c0       	rjmp	.+56     	; 0x1bc <PIN_MODE+0x42>
			DDRB |= (1 << (pin % 8));
 184:	94 b1       	in	r25, 0x04	; 4
 186:	48 2f       	mov	r20, r24
 188:	47 70       	andi	r20, 0x07	; 7
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <PIN_MODE+0x1a>
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	4a 95       	dec	r20
 196:	e2 f7       	brpl	.-8      	; 0x190 <PIN_MODE+0x16>
 198:	29 2b       	or	r18, r25
 19a:	24 b9       	out	0x04, r18	; 4
			if (pin == D12) UCSR1B &= ~(1 << RXEN1);
 19c:	84 30       	cpi	r24, 0x04	; 4
 19e:	29 f4       	brne	.+10     	; 0x1aa <PIN_MODE+0x30>
 1a0:	e9 ec       	ldi	r30, 0xC9	; 201
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	9f 7e       	andi	r25, 0xEF	; 239
 1a8:	90 83       	st	Z, r25
			if (pin == D11) UCSR1B &= ~(1 << TXEN1);
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <PIN_MODE+0x36>
 1ae:	43 c1       	rjmp	.+646    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 1b0:	e9 ec       	ldi	r30, 0xC9	; 201
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	87 7f       	andi	r24, 0xF7	; 247
 1b8:	80 83       	st	Z, r24
 1ba:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP) {
 1bc:	61 30       	cpi	r22, 0x01	; 1
 1be:	99 f4       	brne	.+38     	; 0x1e6 <PIN_MODE+0x6c>
			DDRB &= ~(1 << (pin % 8));
 1c0:	44 b1       	in	r20, 0x04	; 4
 1c2:	87 70       	andi	r24, 0x07	; 7
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	b9 01       	movw	r22, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <PIN_MODE+0x56>
 1cc:	66 0f       	add	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	8a 95       	dec	r24
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <PIN_MODE+0x52>
 1d4:	cb 01       	movw	r24, r22
 1d6:	96 2f       	mov	r25, r22
 1d8:	90 95       	com	r25
 1da:	94 23       	and	r25, r20
 1dc:	94 b9       	out	0x04, r25	; 4
			PORTB |= (1 << (pin % 8));
 1de:	95 b1       	in	r25, 0x05	; 5
 1e0:	89 2b       	or	r24, r25
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN) {
 1e6:	62 30       	cpi	r22, 0x02	; 2
 1e8:	09 f0       	breq	.+2      	; 0x1ec <PIN_MODE+0x72>
 1ea:	25 c1       	rjmp	.+586    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			DDRB &= ~(1 << (pin % 8));
 1ec:	44 b1       	in	r20, 0x04	; 4
 1ee:	87 70       	andi	r24, 0x07	; 7
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <PIN_MODE+0x82>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	8a 95       	dec	r24
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <PIN_MODE+0x7e>
 200:	cb 01       	movw	r24, r22
 202:	80 95       	com	r24
 204:	84 23       	and	r24, r20
 206:	84 b9       	out	0x04, r24	; 4
 208:	08 95       	ret
		}
	}
	else if ((pin >= 6) && (pin < 12)) {
 20a:	9a ef       	ldi	r25, 0xFA	; 250
 20c:	98 0f       	add	r25, r24
 20e:	96 30       	cpi	r25, 0x06	; 6
 210:	08 f0       	brcs	.+2      	; 0x214 <PIN_MODE+0x9a>
 212:	52 c0       	rjmp	.+164    	; 0x2b8 <PIN_MODE+0x13e>
		if (mode == OUTPUT) {
 214:	61 11       	cpse	r22, r1
 216:	17 c0       	rjmp	.+46     	; 0x246 <PIN_MODE+0xcc>
			DDRC |= (1 << ((pin + 2) % 8));
 218:	47 b1       	in	r20, 0x07	; 7
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 96       	adiw	r24, 0x02	; 2
 21e:	87 70       	andi	r24, 0x07	; 7
 220:	90 78       	andi	r25, 0x80	; 128
 222:	99 23       	and	r25, r25
 224:	24 f4       	brge	.+8      	; 0x22e <PIN_MODE+0xb4>
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	88 6f       	ori	r24, 0xF8	; 248
 22a:	9f 6f       	ori	r25, 0xFF	; 255
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	b9 01       	movw	r22, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <PIN_MODE+0xc0>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	8a 95       	dec	r24
 23c:	e2 f7       	brpl	.-8      	; 0x236 <PIN_MODE+0xbc>
 23e:	cb 01       	movw	r24, r22
 240:	84 2b       	or	r24, r20
 242:	87 b9       	out	0x07, r24	; 7
 244:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP)  {
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	e1 f4       	brne	.+56     	; 0x282 <PIN_MODE+0x108>
			DDRC &= ~(1 << ((pin + 2) % 8));
 24a:	47 b1       	in	r20, 0x07	; 7
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 96       	adiw	r24, 0x02	; 2
 250:	87 70       	andi	r24, 0x07	; 7
 252:	90 78       	andi	r25, 0x80	; 128
 254:	99 23       	and	r25, r25
 256:	24 f4       	brge	.+8      	; 0x260 <PIN_MODE+0xe6>
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	88 6f       	ori	r24, 0xF8	; 248
 25c:	9f 6f       	ori	r25, 0xFF	; 255
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	b9 01       	movw	r22, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <PIN_MODE+0xf2>
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	8a 95       	dec	r24
 26e:	e2 f7       	brpl	.-8      	; 0x268 <PIN_MODE+0xee>
 270:	cb 01       	movw	r24, r22
 272:	96 2f       	mov	r25, r22
 274:	90 95       	com	r25
 276:	94 23       	and	r25, r20
 278:	97 b9       	out	0x07, r25	; 7
			PORTC |= (1 << ((pin + 2) % 8));
 27a:	98 b1       	in	r25, 0x08	; 8
 27c:	89 2b       	or	r24, r25
 27e:	88 b9       	out	0x08, r24	; 8
 280:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN) {
 282:	62 30       	cpi	r22, 0x02	; 2
 284:	09 f0       	breq	.+2      	; 0x288 <PIN_MODE+0x10e>
 286:	d7 c0       	rjmp	.+430    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			DDRC &= ~(1 << ((pin + 2) % 8));
 288:	47 b1       	in	r20, 0x07	; 7
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 96       	adiw	r24, 0x02	; 2
 28e:	87 70       	andi	r24, 0x07	; 7
 290:	90 78       	andi	r25, 0x80	; 128
 292:	99 23       	and	r25, r25
 294:	24 f4       	brge	.+8      	; 0x29e <PIN_MODE+0x124>
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	88 6f       	ori	r24, 0xF8	; 248
 29a:	9f 6f       	ori	r25, 0xFF	; 255
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <PIN_MODE+0x130>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <PIN_MODE+0x12c>
 2ae:	cb 01       	movw	r24, r22
 2b0:	80 95       	com	r24
 2b2:	84 23       	and	r24, r20
 2b4:	87 b9       	out	0x07, r24	; 7
 2b6:	08 95       	ret
		}
	}
	else if ((pin >= 12) && (pin < 20)) {
 2b8:	94 ef       	ldi	r25, 0xF4	; 244
 2ba:	98 0f       	add	r25, r24
 2bc:	98 30       	cpi	r25, 0x08	; 8
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <PIN_MODE+0x148>
 2c0:	65 c0       	rjmp	.+202    	; 0x38c <PIN_MODE+0x212>
		if (mode == OUTPUT) {
 2c2:	61 11       	cpse	r22, r1
 2c4:	2a c0       	rjmp	.+84     	; 0x31a <PIN_MODE+0x1a0>
			DDRD |= (1 << ((pin + 4) % 8));
 2c6:	9a b1       	in	r25, 0x0a	; 10
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	2c 5f       	subi	r18, 0xFC	; 252
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	27 70       	andi	r18, 0x07	; 7
 2d2:	30 78       	andi	r19, 0x80	; 128
 2d4:	33 23       	and	r19, r19
 2d6:	34 f4       	brge	.+12     	; 0x2e4 <PIN_MODE+0x16a>
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	31 09       	sbc	r19, r1
 2dc:	28 6f       	ori	r18, 0xF8	; 248
 2de:	3f 6f       	ori	r19, 0xFF	; 255
 2e0:	2f 5f       	subi	r18, 0xFF	; 255
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	ba 01       	movw	r22, r20
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <PIN_MODE+0x176>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	2a 95       	dec	r18
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <PIN_MODE+0x172>
 2f4:	9b 01       	movw	r18, r22
 2f6:	29 2b       	or	r18, r25
 2f8:	2a b9       	out	0x0a, r18	; 10
			if (pin == D0) UCSR0B &= ~(1 << RXEN0);
 2fa:	8c 30       	cpi	r24, 0x0C	; 12
 2fc:	29 f4       	brne	.+10     	; 0x308 <PIN_MODE+0x18e>
 2fe:	e1 ec       	ldi	r30, 0xC1	; 193
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	90 81       	ld	r25, Z
 304:	9f 7e       	andi	r25, 0xEF	; 239
 306:	90 83       	st	Z, r25
			if (pin == D1) UCSR0B &= ~(1 << TXEN0);
 308:	8d 30       	cpi	r24, 0x0D	; 13
 30a:	09 f0       	breq	.+2      	; 0x30e <PIN_MODE+0x194>
 30c:	94 c0       	rjmp	.+296    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 30e:	e1 ec       	ldi	r30, 0xC1	; 193
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	87 7f       	andi	r24, 0xF7	; 247
 316:	80 83       	st	Z, r24
 318:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP) {
 31a:	61 30       	cpi	r22, 0x01	; 1
 31c:	e1 f4       	brne	.+56     	; 0x356 <PIN_MODE+0x1dc>
			DDRD &= ~(1 << ((pin + 4) % 8));
 31e:	4a b1       	in	r20, 0x0a	; 10
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	04 96       	adiw	r24, 0x04	; 4
 324:	87 70       	andi	r24, 0x07	; 7
 326:	90 78       	andi	r25, 0x80	; 128
 328:	99 23       	and	r25, r25
 32a:	24 f4       	brge	.+8      	; 0x334 <PIN_MODE+0x1ba>
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	88 6f       	ori	r24, 0xF8	; 248
 330:	9f 6f       	ori	r25, 0xFF	; 255
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	b9 01       	movw	r22, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <PIN_MODE+0x1c6>
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	8a 95       	dec	r24
 342:	e2 f7       	brpl	.-8      	; 0x33c <PIN_MODE+0x1c2>
 344:	cb 01       	movw	r24, r22
 346:	96 2f       	mov	r25, r22
 348:	90 95       	com	r25
 34a:	94 23       	and	r25, r20
 34c:	9a b9       	out	0x0a, r25	; 10
			PORTD |= (1 << ((pin + 4) % 8));
 34e:	9b b1       	in	r25, 0x0b	; 11
 350:	89 2b       	or	r24, r25
 352:	8b b9       	out	0x0b, r24	; 11
 354:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN) {
 356:	62 30       	cpi	r22, 0x02	; 2
 358:	09 f0       	breq	.+2      	; 0x35c <PIN_MODE+0x1e2>
 35a:	6d c0       	rjmp	.+218    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			DDRD &= ~(1 << ((pin + 4) % 8));
 35c:	4a b1       	in	r20, 0x0a	; 10
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	04 96       	adiw	r24, 0x04	; 4
 362:	87 70       	andi	r24, 0x07	; 7
 364:	90 78       	andi	r25, 0x80	; 128
 366:	99 23       	and	r25, r25
 368:	24 f4       	brge	.+8      	; 0x372 <PIN_MODE+0x1f8>
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	88 6f       	ori	r24, 0xF8	; 248
 36e:	9f 6f       	ori	r25, 0xFF	; 255
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <PIN_MODE+0x204>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <PIN_MODE+0x200>
 382:	cb 01       	movw	r24, r22
 384:	80 95       	com	r24
 386:	84 23       	and	r24, r20
 388:	8a b9       	out	0x0a, r24	; 10
 38a:	08 95       	ret
		}
	}
	else if ((pin == 20) || (pin == 21)) {
 38c:	9c ee       	ldi	r25, 0xEC	; 236
 38e:	98 0f       	add	r25, r24
 390:	92 30       	cpi	r25, 0x02	; 2
 392:	08 f0       	brcs	.+2      	; 0x396 <PIN_MODE+0x21c>
 394:	50 c0       	rjmp	.+160    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		if (mode == OUTPUT) {
 396:	61 11       	cpse	r22, r1
 398:	17 c0       	rjmp	.+46     	; 0x3c8 <PIN_MODE+0x24e>
			DDRE |= (1 << ((pin - 2) % 8));
 39a:	4d b1       	in	r20, 0x0d	; 13
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 97       	sbiw	r24, 0x02	; 2
 3a0:	87 70       	andi	r24, 0x07	; 7
 3a2:	90 78       	andi	r25, 0x80	; 128
 3a4:	99 23       	and	r25, r25
 3a6:	24 f4       	brge	.+8      	; 0x3b0 <PIN_MODE+0x236>
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	88 6f       	ori	r24, 0xF8	; 248
 3ac:	9f 6f       	ori	r25, 0xFF	; 255
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <PIN_MODE+0x242>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <PIN_MODE+0x23e>
 3c0:	cb 01       	movw	r24, r22
 3c2:	84 2b       	or	r24, r20
 3c4:	8d b9       	out	0x0d, r24	; 13
 3c6:	08 95       	ret
		}
		else if (mode == INPUT_PULLUP) {
 3c8:	61 30       	cpi	r22, 0x01	; 1
 3ca:	e1 f4       	brne	.+56     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			DDRE &= ~(1 << ((pin - 2) % 8));
 3cc:	4d b1       	in	r20, 0x0d	; 13
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 97       	sbiw	r24, 0x02	; 2
 3d2:	87 70       	andi	r24, 0x07	; 7
 3d4:	90 78       	andi	r25, 0x80	; 128
 3d6:	99 23       	and	r25, r25
 3d8:	24 f4       	brge	.+8      	; 0x3e2 <PIN_MODE+0x268>
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	88 6f       	ori	r24, 0xF8	; 248
 3de:	9f 6f       	ori	r25, 0xFF	; 255
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	b9 01       	movw	r22, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <PIN_MODE+0x274>
 3ea:	66 0f       	add	r22, r22
 3ec:	77 1f       	adc	r23, r23
 3ee:	8a 95       	dec	r24
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <PIN_MODE+0x270>
 3f2:	cb 01       	movw	r24, r22
 3f4:	96 2f       	mov	r25, r22
 3f6:	90 95       	com	r25
 3f8:	94 23       	and	r25, r20
 3fa:	9d b9       	out	0x0d, r25	; 13
			PORTE |= (1 << ((pin - 2) % 8));
 3fc:	9e b1       	in	r25, 0x0e	; 14
 3fe:	89 2b       	or	r24, r25
 400:	8e b9       	out	0x0e, r24	; 14
 402:	08 95       	ret
		}
		else if (mode == INPUT_PULLDOWN)	{
 404:	62 30       	cpi	r22, 0x02	; 2
 406:	b9 f4       	brne	.+46     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			DDRE &= ~(1 << ((pin - 2) % 8));
 408:	4d b1       	in	r20, 0x0d	; 13
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 97       	sbiw	r24, 0x02	; 2
 40e:	87 70       	andi	r24, 0x07	; 7
 410:	90 78       	andi	r25, 0x80	; 128
 412:	99 23       	and	r25, r25
 414:	24 f4       	brge	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	88 6f       	ori	r24, 0xF8	; 248
 41a:	9f 6f       	ori	r25, 0xFF	; 255
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	b9 01       	movw	r22, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	8a 95       	dec	r24
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	cb 01       	movw	r24, r22
 430:	80 95       	com	r24
 432:	84 23       	and	r24, r20
 434:	8d b9       	out	0x0d, r24	; 13
 436:	08 95       	ret

00000438 <DIGITAL_WRITE>:
		}
	}
}

void DIGITAL_WRITE(uint8_t pin, uint8_t value) {
	if ((pin >= 0) && (pin < 6)) {
 438:	86 30       	cpi	r24, 0x06	; 6
 43a:	f8 f4       	brcc	.+62     	; 0x47a <DIGITAL_WRITE+0x42>
		if (value) {
 43c:	66 23       	and	r22, r22
 43e:	71 f0       	breq	.+28     	; 0x45c <DIGITAL_WRITE+0x24>
			PORTB |= (1 << (pin % 8));
 440:	45 b1       	in	r20, 0x05	; 5
 442:	87 70       	andi	r24, 0x07	; 7
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	b9 01       	movw	r22, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIGITAL_WRITE+0x18>
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	8a 95       	dec	r24
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIGITAL_WRITE+0x14>
 454:	cb 01       	movw	r24, r22
 456:	84 2b       	or	r24, r20
 458:	85 b9       	out	0x05, r24	; 5
 45a:	08 95       	ret
		}
		else {
			PORTB &= ~(1 << (pin % 8));
 45c:	45 b1       	in	r20, 0x05	; 5
 45e:	87 70       	andi	r24, 0x07	; 7
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	b9 01       	movw	r22, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIGITAL_WRITE+0x34>
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	8a 95       	dec	r24
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIGITAL_WRITE+0x30>
 470:	cb 01       	movw	r24, r22
 472:	80 95       	com	r24
 474:	84 23       	and	r24, r20
 476:	85 b9       	out	0x05, r24	; 5
 478:	08 95       	ret
		}
	}
	else if ((pin >= 6) && (pin < 12)) {
 47a:	9a ef       	ldi	r25, 0xFA	; 250
 47c:	98 0f       	add	r25, r24
 47e:	96 30       	cpi	r25, 0x06	; 6
 480:	88 f5       	brcc	.+98     	; 0x4e4 <DIGITAL_WRITE+0xac>
		if (value) {
 482:	66 23       	and	r22, r22
 484:	b9 f0       	breq	.+46     	; 0x4b4 <DIGITAL_WRITE+0x7c>
			PORTC |= (1 << ((pin + 2) % 8));
 486:	48 b1       	in	r20, 0x08	; 8
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 96       	adiw	r24, 0x02	; 2
 48c:	87 70       	andi	r24, 0x07	; 7
 48e:	90 78       	andi	r25, 0x80	; 128
 490:	99 23       	and	r25, r25
 492:	24 f4       	brge	.+8      	; 0x49c <DIGITAL_WRITE+0x64>
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	88 6f       	ori	r24, 0xF8	; 248
 498:	9f 6f       	ori	r25, 0xFF	; 255
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	b9 01       	movw	r22, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIGITAL_WRITE+0x70>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	8a 95       	dec	r24
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIGITAL_WRITE+0x6c>
 4ac:	cb 01       	movw	r24, r22
 4ae:	84 2b       	or	r24, r20
 4b0:	88 b9       	out	0x08, r24	; 8
 4b2:	08 95       	ret
		}
		else {
			PORTC &= ~(1 << ((pin + 2) % 8));
 4b4:	48 b1       	in	r20, 0x08	; 8
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 96       	adiw	r24, 0x02	; 2
 4ba:	87 70       	andi	r24, 0x07	; 7
 4bc:	90 78       	andi	r25, 0x80	; 128
 4be:	99 23       	and	r25, r25
 4c0:	24 f4       	brge	.+8      	; 0x4ca <DIGITAL_WRITE+0x92>
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	88 6f       	ori	r24, 0xF8	; 248
 4c6:	9f 6f       	ori	r25, 0xFF	; 255
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	b9 01       	movw	r22, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIGITAL_WRITE+0x9e>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	8a 95       	dec	r24
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIGITAL_WRITE+0x9a>
 4da:	cb 01       	movw	r24, r22
 4dc:	80 95       	com	r24
 4de:	84 23       	and	r24, r20
 4e0:	88 b9       	out	0x08, r24	; 8
 4e2:	08 95       	ret
		}
	}
	else if ((pin >= 12) && (pin < 20)) {
 4e4:	94 ef       	ldi	r25, 0xF4	; 244
 4e6:	98 0f       	add	r25, r24
 4e8:	98 30       	cpi	r25, 0x08	; 8
 4ea:	88 f5       	brcc	.+98     	; 0x54e <DIGITAL_WRITE+0x116>
		if (value) {
 4ec:	66 23       	and	r22, r22
 4ee:	b9 f0       	breq	.+46     	; 0x51e <DIGITAL_WRITE+0xe6>
			PORTD |= (1 << ((pin + 4) % 8));
 4f0:	4b b1       	in	r20, 0x0b	; 11
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	04 96       	adiw	r24, 0x04	; 4
 4f6:	87 70       	andi	r24, 0x07	; 7
 4f8:	90 78       	andi	r25, 0x80	; 128
 4fa:	99 23       	and	r25, r25
 4fc:	24 f4       	brge	.+8      	; 0x506 <DIGITAL_WRITE+0xce>
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	88 6f       	ori	r24, 0xF8	; 248
 502:	9f 6f       	ori	r25, 0xFF	; 255
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	21 e0       	ldi	r18, 0x01	; 1
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	b9 01       	movw	r22, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIGITAL_WRITE+0xda>
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	8a 95       	dec	r24
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIGITAL_WRITE+0xd6>
 516:	cb 01       	movw	r24, r22
 518:	84 2b       	or	r24, r20
 51a:	8b b9       	out	0x0b, r24	; 11
 51c:	08 95       	ret
		}
		else {
			PORTD &= ~(1 << ((pin + 4) % 8));
 51e:	4b b1       	in	r20, 0x0b	; 11
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	04 96       	adiw	r24, 0x04	; 4
 524:	87 70       	andi	r24, 0x07	; 7
 526:	90 78       	andi	r25, 0x80	; 128
 528:	99 23       	and	r25, r25
 52a:	24 f4       	brge	.+8      	; 0x534 <DIGITAL_WRITE+0xfc>
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	88 6f       	ori	r24, 0xF8	; 248
 530:	9f 6f       	ori	r25, 0xFF	; 255
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	b9 01       	movw	r22, r18
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIGITAL_WRITE+0x108>
 53c:	66 0f       	add	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	8a 95       	dec	r24
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIGITAL_WRITE+0x104>
 544:	cb 01       	movw	r24, r22
 546:	80 95       	com	r24
 548:	84 23       	and	r24, r20
 54a:	8b b9       	out	0x0b, r24	; 11
 54c:	08 95       	ret
		}
	}
	else if ((pin == 20) || (pin == 21)) {
 54e:	9c ee       	ldi	r25, 0xEC	; 236
 550:	98 0f       	add	r25, r24
 552:	92 30       	cpi	r25, 0x02	; 2
 554:	80 f5       	brcc	.+96     	; 0x5b6 <DIGITAL_WRITE+0x17e>
		if (value) {
 556:	66 23       	and	r22, r22
 558:	b9 f0       	breq	.+46     	; 0x588 <DIGITAL_WRITE+0x150>
			PORTE |= (1 << ((pin - 2) % 8));
 55a:	4e b1       	in	r20, 0x0e	; 14
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 97       	sbiw	r24, 0x02	; 2
 560:	87 70       	andi	r24, 0x07	; 7
 562:	90 78       	andi	r25, 0x80	; 128
 564:	99 23       	and	r25, r25
 566:	24 f4       	brge	.+8      	; 0x570 <DIGITAL_WRITE+0x138>
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	88 6f       	ori	r24, 0xF8	; 248
 56c:	9f 6f       	ori	r25, 0xFF	; 255
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	21 e0       	ldi	r18, 0x01	; 1
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	b9 01       	movw	r22, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIGITAL_WRITE+0x144>
 578:	66 0f       	add	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	8a 95       	dec	r24
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIGITAL_WRITE+0x140>
 580:	cb 01       	movw	r24, r22
 582:	84 2b       	or	r24, r20
 584:	8e b9       	out	0x0e, r24	; 14
 586:	08 95       	ret
		}
		else {
			PORTE &= ~(1 << ((pin - 2) % 8));
 588:	4e b1       	in	r20, 0x0e	; 14
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 97       	sbiw	r24, 0x02	; 2
 58e:	87 70       	andi	r24, 0x07	; 7
 590:	90 78       	andi	r25, 0x80	; 128
 592:	99 23       	and	r25, r25
 594:	24 f4       	brge	.+8      	; 0x59e <DIGITAL_WRITE+0x166>
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	88 6f       	ori	r24, 0xF8	; 248
 59a:	9f 6f       	ori	r25, 0xFF	; 255
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	21 e0       	ldi	r18, 0x01	; 1
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	b9 01       	movw	r22, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIGITAL_WRITE+0x172>
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	8a 95       	dec	r24
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIGITAL_WRITE+0x16e>
 5ae:	cb 01       	movw	r24, r22
 5b0:	80 95       	com	r24
 5b2:	84 23       	and	r24, r20
 5b4:	8e b9       	out	0x0e, r24	; 14
 5b6:	08 95       	ret

000005b8 <INIT_TWI>:

void INIT_TWI(uint8_t twi_address) {
	/* (1) The device's own slave address has been received.
	*  (2) The TWEN bit enables TWI n operation and activates the TWI n interface.
	*  (3) the TWI n interrupt request will be activated for as long as the TWCRn.TWINT Flag is high. */
	TWAR0 = (twi_address << 1);
 5b8:	88 0f       	add	r24, r24
 5ba:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR0 = (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 5be:	85 e4       	ldi	r24, 0x45	; 69
 5c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5c4:	08 95       	ret

000005c6 <DisplayLEDs>:
}

void DisplayLEDs(uint8_t load) {
 5c6:	cf 93       	push	r28
 5c8:	c8 2f       	mov	r28, r24
	DIGITAL_WRITE(D2, READ_BIT(load, 7));
 5ca:	68 2f       	mov	r22, r24
 5cc:	66 1f       	adc	r22, r22
 5ce:	66 27       	eor	r22, r22
 5d0:	66 1f       	adc	r22, r22
 5d2:	8e e0       	ldi	r24, 0x0E	; 14
 5d4:	0e 94 1c 02 	call	0x438	; 0x438 <DIGITAL_WRITE>
	DIGITAL_WRITE(D3, READ_BIT(load, 6));
 5d8:	c6 fb       	bst	r28, 6
 5da:	66 27       	eor	r22, r22
 5dc:	60 f9       	bld	r22, 0
 5de:	8f e0       	ldi	r24, 0x0F	; 15
 5e0:	0e 94 1c 02 	call	0x438	; 0x438 <DIGITAL_WRITE>
	DIGITAL_WRITE(D4, READ_BIT(load, 5));
 5e4:	c5 fb       	bst	r28, 5
 5e6:	66 27       	eor	r22, r22
 5e8:	60 f9       	bld	r22, 0
 5ea:	80 e1       	ldi	r24, 0x10	; 16
 5ec:	0e 94 1c 02 	call	0x438	; 0x438 <DIGITAL_WRITE>
	DIGITAL_WRITE(D5, READ_BIT(load, 4));
 5f0:	c4 fb       	bst	r28, 4
 5f2:	66 27       	eor	r22, r22
 5f4:	60 f9       	bld	r22, 0
 5f6:	81 e1       	ldi	r24, 0x11	; 17
 5f8:	0e 94 1c 02 	call	0x438	; 0x438 <DIGITAL_WRITE>
	DIGITAL_WRITE(D6, READ_BIT(load, 3));
 5fc:	c3 fb       	bst	r28, 3
 5fe:	66 27       	eor	r22, r22
 600:	60 f9       	bld	r22, 0
 602:	82 e1       	ldi	r24, 0x12	; 18
 604:	0e 94 1c 02 	call	0x438	; 0x438 <DIGITAL_WRITE>
	DIGITAL_WRITE(D7, READ_BIT(load, 2));
 608:	c2 fb       	bst	r28, 2
 60a:	66 27       	eor	r22, r22
 60c:	60 f9       	bld	r22, 0
 60e:	83 e1       	ldi	r24, 0x13	; 19
 610:	0e 94 1c 02 	call	0x438	; 0x438 <DIGITAL_WRITE>
	DIGITAL_WRITE(D8, READ_BIT(load, 1));
 614:	c1 fb       	bst	r28, 1
 616:	66 27       	eor	r22, r22
 618:	60 f9       	bld	r22, 0
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 1c 02 	call	0x438	; 0x438 <DIGITAL_WRITE>
	DIGITAL_WRITE(D9, READ_BIT(load, 0));
 620:	6c 2f       	mov	r22, r28
 622:	61 70       	andi	r22, 0x01	; 1
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	0e 94 1c 02 	call	0x438	; 0x438 <DIGITAL_WRITE>
}
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <main>:
uint8_t prev_sensor = 0;
const uint8_t sensibility_mask = 0b11111110;

int main(void)
{
    cli();
 62e:	f8 94       	cli
	INIT_TWI(0x36);
 630:	86 e3       	ldi	r24, 0x36	; 54
 632:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <INIT_TWI>
	SettingADC(AVcc, LeftJustified, ADC_Prescaler128, FreeRunning);
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	47 e0       	ldi	r20, 0x07	; 7
 63a:	60 e2       	ldi	r22, 0x20	; 32
 63c:	80 e4       	ldi	r24, 0x40	; 64
 63e:	0e 94 79 00 	call	0xf2	; 0xf2 <SettingADC>
	sei();
 642:	78 94       	sei
	
	PIN_MODE(D9, OUTPUT);
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 bd 00 	call	0x17a	; 0x17a <PIN_MODE>
	PIN_MODE(D8, OUTPUT);
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0e 94 bd 00 	call	0x17a	; 0x17a <PIN_MODE>
	PIN_MODE(D7, OUTPUT);
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	83 e1       	ldi	r24, 0x13	; 19
 658:	0e 94 bd 00 	call	0x17a	; 0x17a <PIN_MODE>
	PIN_MODE(D6, OUTPUT);
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	82 e1       	ldi	r24, 0x12	; 18
 660:	0e 94 bd 00 	call	0x17a	; 0x17a <PIN_MODE>
	PIN_MODE(D5, OUTPUT);
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	81 e1       	ldi	r24, 0x11	; 17
 668:	0e 94 bd 00 	call	0x17a	; 0x17a <PIN_MODE>
	PIN_MODE(D4, OUTPUT);
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	80 e1       	ldi	r24, 0x10	; 16
 670:	0e 94 bd 00 	call	0x17a	; 0x17a <PIN_MODE>
	PIN_MODE(D3, OUTPUT);
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	8f e0       	ldi	r24, 0x0F	; 15
 678:	0e 94 bd 00 	call	0x17a	; 0x17a <PIN_MODE>
	PIN_MODE(D2, OUTPUT);
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	8e e0       	ldi	r24, 0x0E	; 14
 680:	0e 94 bd 00 	call	0x17a	; 0x17a <PIN_MODE>
			
    while (1) 
    {
		actual_sensor = AnalogRead(ChannelADC7);
 684:	87 e0       	ldi	r24, 0x07	; 7
 686:	0e 94 93 00 	call	0x126	; 0x126 <AnalogRead>
 68a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <actual_sensor>
		if ( (actual_sensor & sensibility_mask) != (prev_sensor & sensibility_mask)) {
 68e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 692:	98 27       	eor	r25, r24
 694:	9e 7f       	andi	r25, 0xFE	; 254
 696:	21 f0       	breq	.+8      	; 0x6a0 <main+0x72>
			prev_sensor = actual_sensor;
 698:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			DisplayLEDs(actual_sensor);
 69c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <DisplayLEDs>
		}
		if (process_data) {
 6a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <process_data>
 6a4:	88 23       	and	r24, r24
 6a6:	71 f3       	breq	.-36     	; 0x684 <main+0x56>
			process_data = 0;
 6a8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <process_data>
			switch (received_data) {
 6ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <received_data>
 6b0:	81 3a       	cpi	r24, 0xA1	; 161
 6b2:	29 f4       	brne	.+10     	; 0x6be <main+0x90>
				case 0xA1:
					response_data = prev_sensor;
 6b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <response_data>
				break;
 6bc:	e3 cf       	rjmp	.-58     	; 0x684 <main+0x56>
				default:
					response_data = 0xFF;
 6be:	8f ef       	ldi	r24, 0xFF	; 255
 6c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <response_data>
				break;
 6c4:	df cf       	rjmp	.-66     	; 0x684 <main+0x56>

000006c6 <__vector_24>:
	DIGITAL_WRITE(D7, READ_BIT(load, 2));
	DIGITAL_WRITE(D8, READ_BIT(load, 1));
	DIGITAL_WRITE(D9, READ_BIT(load, 0));
}

ISR(TWI0_vect) {
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
 6d0:	8f 93       	push	r24
	switch (TWSR0 & 0xF8) {
 6d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 6d6:	88 7f       	andi	r24, 0xF8	; 248
 6d8:	80 38       	cpi	r24, 0x80	; 128
 6da:	69 f0       	breq	.+26     	; 0x6f6 <__vector_24+0x30>
 6dc:	18 f4       	brcc	.+6      	; 0x6e4 <__vector_24+0x1e>
 6de:	80 36       	cpi	r24, 0x60	; 96
 6e0:	31 f0       	breq	.+12     	; 0x6ee <__vector_24+0x28>
 6e2:	24 c0       	rjmp	.+72     	; 0x72c <__vector_24+0x66>
 6e4:	88 3a       	cpi	r24, 0xA8	; 168
 6e6:	91 f0       	breq	.+36     	; 0x70c <__vector_24+0x46>
 6e8:	88 3b       	cpi	r24, 0xB8	; 184
 6ea:	c1 f0       	breq	.+48     	; 0x71c <__vector_24+0x56>
 6ec:	1f c0       	rjmp	.+62     	; 0x72c <__vector_24+0x66>
		case STATUS_SR_SLA_ACK:
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 6ee:	85 ec       	ldi	r24, 0xC5	; 197
 6f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 6f4:	1e c0       	rjmp	.+60     	; 0x732 <__vector_24+0x6c>
		
		case STATUS_SR_DATA_ACK:
			received_data = TWDR0;
 6f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 6fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <received_data>
			process_data = 1;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <process_data>
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 704:	85 ec       	ldi	r24, 0xC5	; 197
 706:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 70a:	13 c0       	rjmp	.+38     	; 0x732 <__vector_24+0x6c>
		
		case STATUS_ST_SLA_ACK:
			TWDR0 = response_data;
 70c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <response_data>
 710:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 714:	85 ec       	ldi	r24, 0xC5	; 197
 716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 71a:	0b c0       	rjmp	.+22     	; 0x732 <__vector_24+0x6c>
		
		case STATUS_ST_DATA_ACK:
			TWDR0 = response_data;
 71c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <response_data>
 720:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 724:	85 ec       	ldi	r24, 0xC5	; 197
 726:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 72a:	03 c0       	rjmp	.+6      	; 0x732 <__vector_24+0x6c>
		
		default:
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 72c:	85 ec       	ldi	r24, 0xC5	; 197
 72e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
	}
 732:	8f 91       	pop	r24
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <_exit>:
 73e:	f8 94       	cli

00000740 <__stop_program>:
 740:	ff cf       	rjmp	.-2      	; 0x740 <__stop_program>
